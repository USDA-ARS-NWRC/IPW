#  This Makefile contains macros common to every IPW Makefile.

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  Define a variable to indicate the presence of the -k option (keep-going
#  even if errors) for make

ifeq ($(findstring k,$(MAKEFLAGS)),)
  KEEP_GOING := 0
else
  KEEP_GOING := 1
endif

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ifeq ($(PAGER),)
    PAGER := more
endif

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  Include the local configuration macros

IPW_CONF_MAKE := $(IPW)/conf/conf.mk
include $(IPW_CONF_MAKE)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  Various directories

#  REAL_IPW_DIR = real path to IPW's home directory ($IPW may reference links)

REAL_IPW_DIR := $(shell cd $(IPW) ; pwd)


#  IPW_HREF_PATH = relative path from current directory to IPW's home
#			directory (for use in "HREF" portion of links in
#			HTML pages)
#    1) relative path if current directory in IPW's directory structure, or
#    2) full URL to IPW's home page

IPW_HREF_PATH := $(shell pwd | sed -n -e "s=^$(REAL_IPW_DIR)==p")
ifneq ($(IPW_HREF_PATH),)
  IPW_HREF_PATH := $(shell printf "$(IPW_HREF_PATH)\n" | \
				sed -e "s=/[^/]*=../=g")
else
  IPW_HREF_PATH := http://quercus.ars.pn.usbr.gov/~ipw
endif


#  TOP_DIR = Top of current working IPW directory structure =
#    1) explicitly defined, or
#    2) parent of src if current directory is .../src/... , or
#    3) $(IPW)

ifndef TOP_DIR
  TOP_DIR := $(shell pwd | sed -n -e "s=/src/.*==p")
  ifndef TOP_DIR
    TOP_DIR := $(shell pwd | sed -n -e "s=/src$$==p")
    ifndef TOP_DIR
      TOP_DIR := $(IPW)
    endif
  endif
endif


#  PATH_TO_TOP = relative path from the current directory to TOP_DIR

PATH_TO_TOP := $(shell pwd | sed -e "s=^$(TOP_DIR)==" -e "s=/[^/]*=../=g")


#  IN_IPW_STD_SRC is defined if the current directory is in the IPW standard
#                 source directory ($IPW/src)

ifeq ($(TOP_DIR),$(IPW))
  IN_IPW_STD_SRC := 1
else
  ifeq ($(TOP_DIR),$(REAL_IPW_DIR))
    IN_IPW_STD_SRC := 1
  endif
endif


#  IN_IPW_LOCAL_SRC is defined if the current directory is in the IPW local
#                   source directory ($IPW/local/src)

ifeq ($(TOP_DIR),$(IPW)/local)
  IN_IPW_LOCAL_SRC := 1
else
  ifeq ($(TOP_DIR),$(REAL_IPW_DIR)/local)
    IN_IPW_LOCAL_SRC := 1
  endif
endif


#  INCLUDE_DIRS = directories to search for C include files =
#    1) explicitly defined, or
#    2) $(IPW)/src/lib/h if in IPW standard source directory, or
#    3) $(TOP_DIR)/h $(IPW)/h

ifndef INCLUDE_DIRS
  ifdef IN_IPW_STD_SRC
    INCLUDE_DIRS := $(IPW)/src/lib/h
  else
    INCLUDE_DIRS := $(TOP_DIR)/h $(IPW)/h
  endif
endif


#  LIB_DIRS = directories to search for libraries when linking =
#    1) explicitly defined, or
#    2) $(IPW)/src/lib/build if in IPW standard source directory, or
#    3) $(TOP_DIR)/lib $(IPW)/lib

ifndef LIB_DIRS
  ifdef IN_IPW_STD_SRC
    LIB_DIRS := $(IPW)/src/lib/build
  else
    LIB_DIRS := $(TOP_DIR)/lib $(IPW)/lib
  endif
endif


#  MAN_DIR = directory where manual pages reside =
#    1) explicitly defined, or
#    2) $(TOP_DIR)/man

ifndef MAN_DIR
  MAN_DIR := $(TOP_DIR)/man
endif


#  DOC_HTML_DIR = directory where HTML version of documentation goes =
#    1) explicitly defined, or
#    2) $(TOP_DIR)/doc/html

ifndef DOC_HTML_DIR
  DOC_HTML_DIR := $(TOP_DIR)/doc/html
endif

PATH_TO_DOC_HTML := $(PATH_TO_TOP)doc/html


DOC_SRC_DIR := $(IPW)/doc/src

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  IPW macros
#
#  The macro IPWMACRO_OPTS can be defined to include additional
#  options to the call to "ipwMacro"

IPW_MACRO_CMD := $(IPW)/make/bin/ipwMacro -DIPW=$(IPW)

#  IPW macro command for source directories

#  Are there local IPW macros for the current directory?

ifneq (,$(strip $(NAME) $(DESCRIPTION) $(CATEGORY) $(AUX_DIR) ))
  LOCAL_IPW_MACROS := 1
  IPW_MACRO_FILE := IPWmacros
  IPW_MACRO = $(IPW_MACRO_CMD) $(IPWMACRO_OPTS) $(IPW_MACRO_FILE)
else
  IPW_MACRO = $(IPW_MACRO_CMD) $(IPWMACRO_OPTS)
endif

#  IPW macro command for HTML documentation

IPW_MACRO_DOC = $(IPW_MACRO_CMD) $(IPWMACRO_OPTS) $(DOC_SRC_DIR)/Macros


#  File with IPW macros for paths to interpreters
INTERPRETER_MACROS := $(IPW)/conf/conf.ipw

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  Some administative commands

INSTALL := $(IPW)/make/bin/install
MODDATE := $(IPW)/make/bin/modDate

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  IPW commands

SCRIPT_MODE := 775
PGM_MODE    := 775

#  Macro to make an executable version of a script.
#  The extension of the file name determines what interpreter will be
#  prepended as the first line.

define mk-script
  @printf "Making script \"$@\"\n"
  @case $(suffix $<) in \
    .sh)   cmd=$(SH) ;; \
    .awk)  cmd=$(AWK) ;; \
    .sed)  cmd=$(SED) ;; \
    .pl)   cmd=$(PERL) ;; \
    *)     printf "Unknown suffix: $(suffix $<) --"; \
           printf " must be one of these: .sh .awk .sed .pl\n"; \
           exit 1 ;; \
  esac ; \
    printf "#! $$cmd\n" > $@
  @$(IPW_MACRO) $(INTERPRETER_MACROS) $< >> $@
  @chmod $(SCRIPT_MODE) $@
endef

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  Flags for C compiler and linker/loader
#  Note: Use -iquote option for GCC to prevent directives like this:
#
#		#include <_types.h>
#
#	 in system headers from accidentally including "$(IPW)/h/_types.h"
#	 The -iquote option was added in GCC v4.

ifeq ($(CC) $(GCC_HAS_IQUOTE),gcc yes)
  CFLAGS := $(foreach dir, $(INCLUDE_DIRS), -iquote $(dir) -fopenmp $(EXTRA_CFLAGS))
else
  CFLAGS := $(foreach dir, $(INCLUDE_DIRS), -I$(dir))
endif
LDFLAGS := $(foreach dir, $(LIB_DIRS), -L$(dir))

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  Macros related to source-code files

OBJS := $(SRCS:%.c=%.o)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

NAME_DESC_TXT := NameDesc.txt
NAME_DESC_HTML := NameDesc.html

DESC_FILE_HTML := Description.html

COMMANDS_TXT := Commands.txt
CMD_LIST_HTML := CmdList.html
COMMANDS_HTML := Commands.html

CATEGORY_HTML := Category.html
CATGRY_NAME_HTML := CatgryName.html
CATEGORY_LIST := Categories.html

FUNC_LIST_TXT := Functions.txt
FUNC_LIST_HTML := Functions.html

LIB_LIST_TXT := Libraries.txt
LIB_LIST_HTML := Libraries.html

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  Macros related to string options (multichar options)

ifdef STRING_OPTIONS
  CFLAGS += -DSTRING_OPTIONS
endif

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  Macros related to debugging

DEBUG_DIR := Debug
DEBUG_LIB_SUFFIX := _dbg
DEBUG_OBJS := $(foreach obj, $(OBJS), $(DEBUG_DIR)/$(obj))

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  Macros related to libraries

LIB_MODE := 664

AR := ar
AR_ADD_FLAGS := rusv
AR_DEL_FLAGS := dsv

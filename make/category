#  This Makefile defines macros and rules for directories that represent
#  categories of IPW commands.
#
#  This Makefile expects these macros to be defined:
#
#	CATEGORY = name of the command category
#	DIRS     = list of directories representing the commands in the
#		     category (one directory per command; the order of the
#		     list is used in the category's documentation)
#
#  Input files:
#
#	$(DESC_FILE_HTML) = "Description.html" (optional)
#
#		HTML text: more detailed description of the category.
#		If this file exists, its contents are placed in the
#		category's individual HTML document: $(CATEGORY_HTML)
#
#  Output files:
#
#	$(COMMANDS_TXT) = "Commands.txt"
#
#		Text file: a list of the category's commands and their
#		descriptions.
#
#	$(COMMANDS_HTML) = "Commands.html"
#
#		HTML text: a list of the category's commands and their
#		descriptions.  Contains links to the commands' manual pages.
#
#	$(CATEGORY_HTML) = "Category.html"
#
#		An HTML document that contains the category's optional
#		description (DESC_FILE_HTML) and a list of its commands.
#		It is installed in IPW's user guide.
#
#  Intermediate files:
#
#	$(CATGRY_NAME_HTML) = "CatgryName.html"
#
#		HTML text: category's name as a List Item with a link to
#		its HTML document (CATEGORY_HTML).
#
#	$(CMD_LIST_HTML) = "CmdList.html"
#
#		HTML text: a list of the category's commands and their
#		descriptions.  Contains links to the commands' manual pages.
#		Used to build $(COMMANDS_HTML) and $(CATEGORY_HTML).
 
 
HELP_FILE := category

TARGETS := cmd install-cmd man install-man uninstall-man clean-man

.PHONY : all all.DIRS
all : all.DIRS cmd-list
 
include $(IPW)/make/_macros
include $(IPW)/make/_directory
include $(IPW)/make/_rules
 
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  Target used by makefiles in directories of individual commands to
#  access the category's name.

category-name :
	@printf "$(CATEGORY)\n";

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  Define rules to make files with lists of category's commands

#  First, determine if there's a HTML description file for the category

HAVE_DESC_FILE := $(shell ls $(DESC_FILE_HTML) 2>/dev/null)
ifndef HAVE_DESC_FILE
  DESC_FILE_HTML :=
endif

#  HTML_INSTALL_DIR = the directory where the HTML document containing a list
#		      of category's commands is installed
#
#    =	1) $IPW/doc/html/userGuide/categories (if in IPW standard src directory)
#	2) $(TOP_DIR)/doc/html/categories     (otherwise)

ifdef IN_IPW_STD_SRC
   HTML_INSTALL_DIR := $(PATH_TO_DOC_HTML)/userGuide/categories
else
   HTML_INSTALL_DIR := $(PATH_TO_DOC_HTML)/categories
endif
CURRENT_DIR := $(shell pwd | sed -e "s=.*/==")
INSTALLED_CATEGORY_HTML := $(HTML_INSTALL_DIR)/$(CURRENT_DIR).html

$(INSTALLED_CATEGORY_HTML) : $(CATEGORY_HTML)
	$(INSTALL) -c $< $@


ifdef DIRS

  CMD_TXT_FILES := $(foreach dir, $(DIRS), $(dir)/$(NAME_DESC_TXT))
  $(CMD_TXT_FILES) : %/$(NAME_DESC_TXT) : %/Makefile
	$(MAKE) -C $(dir $@) name-desc

  $(COMMANDS_TXT) : $(CMD_TXT_FILES) Makefile
	@printf "Making file \"$@\"\n"
	@printf "\n$(CATEGORY)\n\n"				> $@
	@cat $(CMD_TXT_FILES) | $(IPW)/make/bin/nameDesc	>> $@

  CMD_HTML_FILES := $(foreach dir, $(DIRS), $(dir)/$(NAME_DESC_HTML))
  $(CMD_HTML_FILES) : %/$(NAME_DESC_HTML) : %/Makefile
	$(MAKE) -C $(dir $@) name-desc

  $(CMD_LIST_HTML) : $(CMD_HTML_FILES) Makefile
	@printf "Making file \"$@\"\n"
	@printf "<UL>\n"	        >  $@
	@cat $(CMD_HTML_FILES)	        >> $@
	@printf "</UL>\n"	        >> $@

else  # DIRS

  $(COMMANDS_TXT) :
	@printf "Making file \"$@\"\n"
	@printf "\n$(CATEGORY)\n\n"	> $@
	@printf "  (no commands)\n"	>> $@

  $(CMD_LIST_HTML) :
	@printf "Making file \"$@\"\n"
	@printf "<UL><I>(no commands)</I>\n"	>  $@
	@printf "</UL>\n"			>> $@

endif  # DIRS


IPWMACRO_OPTS := "-Dipw_href_path=../../" \
		 "-DMod_Date=$(shell date '+%e %B %Y')"

$(COMMANDS_HTML) : Makefile $(CMD_LIST_HTML)
	@printf "Making file \"$@\"\n"
	@printf "<B>$(CATEGORY)</B>\n"   > $@
	@cat $(CMD_LIST_HTML)	        >> $@
 
$(CATEGORY_HTML) : Makefile $(DESC_FILE_HTML) $(CMD_LIST_HTML)
	@printf "Making file \"$@\"\n"
	@printf "%%Title(\"$(CATEGORY)\")\n" | $(IPW_MACRO_DOC) - > $@
ifdef HAVE_DESC_FILE
	@cat $(DESC_FILE_HTML)		    >> $@
endif
	@cat $(CMD_LIST_HTML)		    >> $@
	@$(IPW_MACRO_DOC) $(DOC_SRC_DIR)/PageBottom2 >> $@

$(CATGRY_NAME_HTML) : Makefile
	@printf "Making file \"$@\"\n"
	@printf "  <LI><A HREF=\"$(CURRENT_DIR).html\">$(CATEGORY)</A>\n" > $@

.PHONY : cmd-list redo-cmd-list clean-cmd-list

cmd-list : $(COMMANDS_TXT) $(COMMANDS_HTML) $(CATEGORY_HTML) $(CATGRY_NAME_HTML)

redo-cmd-list : clean-cmd-list redo-name-desc cmd-list

clean-cmd-list :
	rm -f $(COMMANDS_TXT) $(CMD_LIST_HTML) $(COMMANDS_HTML) \
		$(CATEGORY_HTML) $(CATGRY_NAME_HTML)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
#  Targets for installing and uninstalling

.PHONY : install install.DIRS uninstall uninstall.DIRS
.PHONY : uninstall+clean uninstall+clean.DIRS

install : $(INSTALLED_CATEGORY_HTML) install.DIRS

uninstall uninstall+clean : % : %.DIRS
	rm -f $(INSTALLED_CATEGORY_HTML)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
#  Targets for generating an archive file for exporting category
#  (Only local categories)
 
ifndef IN_IPW_STD_SRC
  ARCHIVE_EXCLUDE = exclude.ctgry
  include $(IPW)/make/_archive
endif
 
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  Targets for recursing on subdirectories

.PHONY : redo-name-desc

redo-name-desc all.DIRS clean.DIRS install.DIRS uninstall.DIRS \
    uninstall+clean.DIRS :
ifdef DIRS
	@target=$(@:.DIRS=) ; subdirs='$(DIRS)' ; \
	    $(recurse-on-subdirs)
endif

.PHONY : clean clean.DIRS

clean uninstall+clean : % : clean-cmd-list %.DIRS

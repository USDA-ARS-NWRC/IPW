#  This Makefile defines macros and rules for directories that represent
#  categories of IPW functions (i.e., the subdirectories of an IPW library).
#
#  This Makefile expects these macros to be defined:
#
#	CATEGORY     = name of the function category
#	DESCRIPTION  = one-line description of the function category
#	FUNCS	     = list of public functions in this category
#		         (the order of the list is used in the category's
#		          documentation)
#
#  These macros are optional:
#
#	PRIVATE_SRCS  = list of source files representing the private functions
#		        in the category (i.e., that are internal to the module
#		        represented by the category)
#
#	INCLUDE_FILES = name of include files associated with this category
#
#	NO_MANPAGES   = its presence indicates that there are no man pages for
#		        the public functions
#
#	SKIP_FUNC     = function to skip in making list of links (see the
#		        target "list-of-links"

HELP_FILE := funcCategory

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  Define full list of source files

FUNC_SRCS := $(foreach f, $(FUNCS), $(f).c)
SRCS := $(FUNC_SRCS) $(PRIVATE_SRCS)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  get the library's name from the parent directory's Makefile

ifndef LIB_NAME
  LIB_NAME := $(shell $(MAKE) --no-print-directory -C .. -s library-name)
endif

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  default target is to make everything:
#	the object files for the source files, and add them to library
#	the man pages for the functions
#	the function list
.PHONY : all
all : funcs add-funcs all.DIRS func-list

include $(IPW)/make/_macros
include $(IPW)/make/_libmacros
include $(IPW)/make/_rules
include $(IPW)/make/_directory

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
#  Target used by makefiles in directories with functions' manpages  to
#  access the category's name and description.
 
category-name :
	@printf "$(CATEGORY)\n";
 
category-desc :
	@printf "$(DESCRIPTION)\n";
 
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

.PHONY : funcs
funcs : $(OBJS)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  Include files (if there are any)

INCLUDE_DIR := ../../h
include $(IPW)/make/_includeFile

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

.PHONY : install add-funcs uninstall uninstall+clean delete-funcs

install : install-include install-man

add-funcs: funcs
	@if [ ! -d $(LIB_BUILD_DIR) ] ; then \
	    mkdir -p $(LIB_BUILD_DIR) ; \
	    echo Created directory: $(LIB_BUILD_DIR) ; \
	fi
	$(AR) $(AR_ADD_FLAGS) $(LIB_PATH) $(OBJS)
 

uninstall : uninstall-include uninstall-man 

uninstall+clean : uninstall-include uninstall+clean.DIRS

delete-funcs :
	if [ -f $(LIB_PATH) ] ; then \
	    $(AR) $(AR_DEL_FLAGS) $(LIB_PATH) $(OBJS) ; \
	fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  For manpage targets, recurse on man directories for functions
#  If there is a man page subdirectory for the whole category (called
#  Category), then recurse on it first.

MAN_DIR := Man
CATEGORY_MAN_DIR := $(MAN_DIR)/Category
FUNC_MAN_DIRS := $(foreach f, $(FUNCS), $(MAN_DIR)/$(f))

.PHONY : man install-man uninstall-man clean-man all.DIRS clean.DIRS \
	 uninstall+clean.DIRS

man install-man uninstall-man clean-man all.DIRS clean.DIRS \
    uninstall+clean.DIRS :
ifndef NO_MANPAGES
	@subdirs='$(FUNC_MAN_DIRS)' ; \
	    if [ -d $(CATEGORY_MAN_DIR) ] ; then \
		subdirs="$(CATEGORY_MAN_DIR) $$subdirs" ; \
	    fi ; \
	    target=$(@:.DIRS=) ; \
	    $(recurse-on-subdirs)
endif


#  Target to create and initialize the man directories for the functions

.PHONY : man-dirs
man-dirs :
ifdef NO_MANPAGES
	@printf 'No directories made because the functions have no man pages.\n'
	@printf '(The macro NO_MANPAGES is defined in Makefile.)\n'
else
	@$(IPW)/make/bin/mkManDirs -d $(MAN_DIR) $(FUNCS)
endif

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  Define rules to make files with lists of category's functions

ifndef NO_MANPAGES

  FUNC_TXT_FILES := $(foreach dir, $(FUNC_MAN_DIRS), $(dir)/$(NAME_DESC_TXT))
  $(FUNC_LIST_TXT) : $(FUNC_TXT_FILES)
	@printf "Making file \"$@\"\n"
	@printf "\n$(CATEGORY) - $(DESCRIPTION)\n\n"		> $@
	@cat $(FUNC_TXT_FILES) | $(IPW)/make/bin/nameDesc	>> $@

  $(FUNC_TXT_FILES) : %/$(NAME_DESC_TXT) : %/Makefile
	$(MAKE) -C $(dir $@) name-desc

  FUNC_HTML_FILES := $(foreach dir, $(FUNC_MAN_DIRS), $(dir)/$(NAME_DESC_HTML))
  $(FUNC_LIST_HTML) : $(FUNC_HTML_FILES)
	@printf "Making file \"$@\"\n"
	@printf "<B>"					> $@
	@if [ -d $(CATEGORY_MAN_DIR) ] ; then				      \
	  name=`$(MAKE) --no-print-directory -C $(CATEGORY_MAN_DIR) -s        \
		manpg-name` ;						      \
	  printf "<A HREF=\"../man5/$${name}.html\">$(CATEGORY)</A>" >> $@ ;  \
	else								      \
	  printf "$(CATEGORY)" >> $@ ;					      \
	fi						
	@printf "</B> - $(DESCRIPTION)\n"  >> $@
	@printf "<UL>\n"		   >> $@
	@cat $(FUNC_HTML_FILES)		   >> $@
	@printf "</UL>\n"		   >> $@

  $(FUNC_HTML_FILES) : %/$(NAME_DESC_HTML) : %/Makefile
	$(MAKE) -C $(dir $@) name-desc

endif

.PHONY : func-list redo-func-list clean-func-list

ifndef NO_MANPAGES
  func-list : $(FUNC_LIST_TXT) $(FUNC_LIST_HTML)
else
  func-list :
endif

redo-func-list : clean-func-list redo-name-desc func-list

clean-func-list :
ifndef NO_MANPAGES
	rm -f $(FUNC_LIST_TXT) $(FUNC_LIST_HTML)
endif

# recurse on manpage subdirectories to either clean or redo name &
# description files
redo-name-desc clean-name-desc :
ifndef NO_MANPAGES
	@target=$@ ; subdirs='$(FUNC_MAN_DIRS)' ; \
	    $(recurse-on-subdirs)
endif

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  Debugging version of library

.PHONY : funcs-debug
funcs-debug : $(DEBUG_DIR) $(DEBUG_OBJS)

.PHONY : debug
debug : funcs-debug install-include
	$(AR) $(AR_ADD_FLAGS) $(DEBUG_LIB_PATH) $(DEBUG_OBJS)

.PHONY : clean-debug
clean-debug :
	rm -f $(DEBUG_DIR)/*.o
	if [ -d $(DEBUG_DIR) ] ; then rm -fr $(DEBUG_DIR) ; fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

.PHONY : clean-objs clean

clean-objs :
	rm -f $(OBJS)

clean : clean-objs clean-man clean-debug clean-func-list clean.DIRS

uninstall+clean : clean-objs clean-debug clean-func-list

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#  A private target invoked by the Makefiles for the man pages of
#  function categories (see the include file "funcCatManpg") and library
#  functions (see the include file "funcManpage").
#
#  Print the list of public functions in HTML as links to their man pages
#  (for use in creating the SEE ALSO sections of man pages)
#
#  If this list should omit a function (i.e., the man page is for that
#  function), then the macro SKIP_FUNC has its name.

ifdef SKIP_FUNC
  LIST_OF_FUNCS := $(filter-out $(SKIP_FUNC),$(FUNCS))

  #  Since the man page belongs to a function, the man pages for the other
  #  functions reside in the same directory
  REL_MAN_PATH :=

else
  LIST_OF_FUNCS := $(FUNCS)

  #  The man page belongs to a library category and resides in section 5,
  #  while the functions' man pages are in section 3.
  REL_MAN_PATH := ../man3/
endif

LAST_FUNC := $(word $(words $(LIST_OF_FUNCS)),$(LIST_OF_FUNCS))

.PHONY : list-of-links
list-of-links :
	@for func in $(LIST_OF_FUNCS) ; do \
	    printf "<A HREF=\"$(REL_MAN_PATH)$$func.html\">$$func()</A>" ; \
	    if [ $$func != "$(LAST_FUNC)" ] ; then \
		printf "," ; \
	    fi ; \
	    printf "\n" ; \
	done
